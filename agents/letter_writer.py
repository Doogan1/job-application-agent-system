#!/usr/bin/env python3
"""
Letter Writer Agent

This agent generates customized cover letters for job applications.
"""

import logging
import os
import time
from typing import Dict, Any, List
from pathlib import Path

from agents.job_finder import JobListing

logger = logging.getLogger(__name__)

class LetterWriter:
    """Agent that writes cover letters for job applications"""
    
    def __init__(self, config):
        """Initialize with configuration"""
        self.config = config
        self.output_directory = config.RESUME.get("output_directory", "data/cover_letters/generated")
        self.user_info = config.USER
        
        # Create output directory if it doesn't exist
        os.makedirs(self.output_directory, exist_ok=True)
        
        logger.info("LetterWriter initialized")
    
    def create_letter(self, job: JobListing, resume: Dict[str, Any]) -> Dict[str, Any]:
        """Create a customized cover letter for a specific job listing"""
        logger.info(f"Creating cover letter for {job.title} at {job.company}")
        
        # Generate a safe filename
        safe_company = "".join(c if c.isalnum() else "_" for c in job.company)
        safe_title = "".join(c if c.isalnum() else "_" for c in job.title)
        filename = f"cover_letter_{safe_company}_{safe_title}.docx"
        output_path = Path(self.output_directory) / filename
        
        # Extract company information for personalization
        company_info = self._research_company(job.company)
        
        # Generate cover letter content
        letter_content = self._generate_letter_content(job, resume, company_info)
        
        # Create the actual cover letter file
        self._create_letter_file(letter_content, output_path)
        
        # Return information about the created cover letter
        return {
            "path": str(output_path),
            "company_research": company_info.get("highlights", []),
            "personalization_level": "high",
            "filename": filename
        }
    
    def _research_company(self, company_name: str) -> Dict[str, Any]:
        """Research company to personalize cover letter"""
        # In a real implementation, this would use web scraping, company APIs, or AI
        # For this example, we'll simulate the process
        
        logger.info(f"Researching company: {company_name}")
        time.sleep(1)  # Simulate research
        
        # This could use the OpenAI API in a real implementation
        return {
            "name": company_name,
            "highlights": [
                f"{company_name} is known for innovation in their field",
                f"{company_name} has a strong commitment to employee development",
                f"{company_name} values collaborative work environments"
            ],
            "values": ["innovation", "collaboration", "excellence"],
            "recent_news": f"{company_name} recently expanded their operations"
        }
    
    def _generate_letter_content(self, job: JobListing, resume: Dict[str, Any], company_info: Dict[str, Any]) -> Dict[str, Any]:
        """Generate cover letter content based on job, resume, and company research"""
        # In a real implementation, this might use templates and LLMs
        # We'll just return a data structure for now
        
        logger.info("Generating cover letter content")
        
        # This would be generated by an LLM in a real implementation
        paragraphs = [
            f"I am writing to express my interest in the {job.title} position at {job.company}. "
            f"With my experience in {', '.join(resume['skills'][:3])}, I am confident in my ability to contribute to your team.",
            
            f"I was particularly drawn to {job.company} because of your {company_info['highlights'][0].lower()}. "
            f"This aligns with my professional values and expertise in {resume['skills'][0]}.",
            
            f"In my previous role at {resume['experience'][0]['company']}, I {resume['experience'][0]['description'][0].lower()}. "
            f"This experience has prepared me well for the requirements of the {job.title} position.",
            
            "I am excited about the opportunity to bring my skills to your team and would welcome the chance to discuss how I can contribute to your company's success.",
            
            f"Thank you for considering my application. I look forward to the possibility of working with the team at {job.company}."
        ]
        
        return {
            "recipient": f"Hiring Manager\n{job.company}",
            "sender": f"{self.user_info['name']}\n{self.user_info['email']}\n{self.user_info['phone']}",
            "date": time.strftime("%B %d, %Y"),
            "subject": f"Application for {job.title} Position",
            "salutation": "Dear Hiring Manager,",
            "paragraphs": paragraphs,
            "closing": "Sincerely,",
            "signature": self.user_info['name']
        }
    
    def _create_letter_file(self, letter_content: Dict[str, Any], output_path: Path) -> None:
        """Create the actual cover letter file from the letter content"""
        # In a real implementation, this would use docx or similar library
        # to create a formatted document
        
        logger.info(f"Creating cover letter file at {output_path}")
        time.sleep(1)  # Simulate file creation
        
        # Create a placeholder file for now
        with open(output_path, "w") as f:
            f.write(f"{letter_content['sender']}\n\n")
            f.write(f"{letter_content['date']}\n\n")
            f.write(f"{letter_content['recipient']}\n\n")
            f.write(f"Subject: {letter_content['subject']}\n\n")
            f.write(f"{letter_content['salutation']}\n\n")
            
            for paragraph in letter_content['paragraphs']:
                f.write(f"{paragraph}\n\n")
            
            f.write(f"{letter_content['closing']}\n\n")
            f.write(f"{letter_content['signature']}")
        
        logger.info(f"Cover letter created successfully")

if __name__ == "__main__":
    # For standalone testing
    import sys
    sys.path.append("..")
    import config
    
    logging.basicConfig(level=logging.INFO)
    
    # Create a test job listing
    test_job = JobListing(
        id="test123",
        title="Python Developer",
        company="Example Corp",
        location="Remote",
        description="Looking for a Python developer with data analysis skills...",
        url="https://example.com/jobs/123",
        date_posted="2025-04-30"
    )
    
    # Create a test resume
    test_resume = {
        "path": "/path/to/resume.docx",
        "skills_used": ["Python", "Data Analysis", "Machine Learning"],
        "key_terms": ["python", "data", "machine learning"],
        "filename": "Example_Corp_Python_Developer.docx",
        "skills": ["Python", "Data Analysis", "Machine Learning", "SQL", "Web Development"],
        "experience": [
            {
                "company": "Previous Company",
                "position": "Junior Developer",
                "start_date": "2022-01",
                "end_date": "Present",
                "description": [
                    "Developed data processing pipelines",
                    "Created dashboards for visualizing metrics",
                    "Collaborated with cross-functional teams"
                ]
            }
        ]
    }
    
    writer = LetterWriter(config)
    letter = writer.create_letter(test_job, test_resume)
    print(f"Created cover letter: {letter['path']}")
